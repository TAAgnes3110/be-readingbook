#!/usr/bin/env node

/**
 * Setup script cho Reading Book API
 * T·ª± ƒë·ªông ki·ªÉm tra v√† h∆∞·ªõng d·∫´n setup cho team m·ªõi
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Colors cho console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFile(filePath, description) {
  if (fs.existsSync(filePath)) {
    log(`‚úÖ ${description}`, 'green');
    return true;
  } else {
    log(`‚ùå ${description}`, 'red');
    return false;
  }
}

function checkNodeVersion() {
  try {
    const version = process.version;
    const majorVersion = parseInt(version.slice(1).split('.')[0]);

    if (majorVersion >= 18) {
      log(`‚úÖ Node.js version: ${version}`, 'green');
      return true;
    } else {
      log(`‚ùå Node.js version: ${version} (c·∫ßn >= 18.x)`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra Node.js version`, 'red');
    return false;
  }
}

function checkNpmVersion() {
  try {
    const version = execSync('npm --version', { encoding: 'utf8' }).trim();
    const majorVersion = parseInt(version.split('.')[0]);

    if (majorVersion >= 9) {
      log(`‚úÖ npm version: ${version}`, 'green');
      return true;
    } else {
      log(`‚ùå npm version: ${version} (c·∫ßn >= 9.x)`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra npm version`, 'red');
    return false;
  }
}

function checkDependencies() {
  const nodeModulesPath = path.join(process.cwd(), 'node_modules');
  if (fs.existsSync(nodeModulesPath)) {
    log(`‚úÖ Dependencies ƒë√£ c√†i ƒë·∫∑t`, 'green');
    return true;
  } else {
    log(`‚ùå Dependencies ch∆∞a c√†i ƒë·∫∑t`, 'red');
    return false;
  }
}

function createEnvFile() {
  const envPath = path.join(process.cwd(), '.env');
  const envExamplePath = path.join(process.cwd(), 'env.example');

  if (fs.existsSync(envPath)) {
    log(`‚úÖ File .env ƒë√£ t·ªìn t·∫°i`, 'green');
    return true;
  }

  if (fs.existsSync(envExamplePath)) {
    try {
      fs.copyFileSync(envExamplePath, envPath);
      log(`‚úÖ ƒê√£ t·∫°o file .env t·ª´ env.example`, 'green');
      log(`‚ö†Ô∏è  Vui l√≤ng c·∫≠p nh·∫≠t c√°c gi√° tr·ªã trong file .env`, 'yellow');
      return true;
    } catch (error) {
      log(`‚ùå Kh√¥ng th·ªÉ t·∫°o file .env: ${error.message}`, 'red');
      return false;
    }
  } else {
    log(`‚ùå File env.example kh√¥ng t·ªìn t·∫°i`, 'red');
    return false;
  }
}

function createLogsDirectory() {
  const logsPath = path.join(process.cwd(), 'logs');

  if (!fs.existsSync(logsPath)) {
    try {
      fs.mkdirSync(logsPath, { recursive: true });
      log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c logs`, 'green');
    } catch (error) {
      log(`‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c logs: ${error.message}`, 'red');
    }
  } else {
    log(`‚úÖ Th∆∞ m·ª•c logs ƒë√£ t·ªìn t·∫°i`, 'green');
  }
}

function showNextSteps() {
  log('\nüìã C√°c b∆∞·ªõc ti·∫øp theo:', 'cyan');
  log('1. C·∫≠p nh·∫≠t file .env v·ªõi th√¥ng tin th·ª±c t·∫ø', 'yellow');
  log('2. ƒê·∫∑t file serviceAccountKey.json v√†o th∆∞ m·ª•c g·ªëc', 'yellow');
  log('3. Ch·∫°y: npm run dev', 'yellow');
  log('4. Ki·ªÉm tra: http://localhost:3000/health', 'yellow');

  log('\nüìñ Xem h∆∞·ªõng d·∫´n chi ti·∫øt:', 'cyan');
  log('- README.md: T·ªïng quan d·ª± √°n', 'blue');
  log('- SETUP_GUIDE.md: H∆∞·ªõng d·∫´n setup t·ª´ng b∆∞·ªõc', 'blue');
  log('- env.example: Template cho file .env', 'blue');
}

function main() {
  log('üöÄ Reading Book API - Setup Checker', 'bright');
  log('=====================================\n', 'bright');

  let allGood = true;

  // Ki·ªÉm tra Node.js v√† npm
  log('üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng:', 'cyan');
  allGood &= checkNodeVersion();
  allGood &= checkNpmVersion();

  // Ki·ªÉm tra dependencies
  log('\nüì¶ Ki·ªÉm tra dependencies:', 'cyan');
  allGood &= checkDependencies();

  // Ki·ªÉm tra files c·∫•u h√¨nh
  log('\n‚öôÔ∏è  Ki·ªÉm tra c·∫•u h√¨nh:', 'cyan');
  allGood &= checkFile('.env', 'File .env');
  allGood &= checkFile('serviceAccountKey.json', 'File serviceAccountKey.json');
  allGood &= checkFile('env.example', 'File env.example');

  // T·∫°o file .env n·∫øu ch∆∞a c√≥
  if (!fs.existsSync('.env')) {
    log('\nüîß T·∫°o file c·∫•u h√¨nh:', 'cyan');
    createEnvFile();
  }

  // T·∫°o th∆∞ m·ª•c logs
  log('\nüìÅ T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt:', 'cyan');
  createLogsDirectory();

  // K·∫øt qu·∫£
  log('\n' + '='.repeat(50), 'bright');
  if (allGood) {
    log('üéâ Setup ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ ch·∫°y: npm run dev', 'green');
  } else {
    log('‚ö†Ô∏è  C·∫ßn ho√†n thi·ªán m·ªôt s·ªë b∆∞·ªõc setup', 'yellow');
  }

  showNextSteps();

  log('\nüÜò C·∫ßn h·ªó tr·ª£? Xem SETUP_GUIDE.md ho·∫∑c li√™n h·ªá team!', 'magenta');
}

// Ch·∫°y script
if (require.main === module) {
  main();
}

module.exports = { main };

